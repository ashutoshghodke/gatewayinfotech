==================== Array =====================

Key Characteristics
Homogeneous Data: All elements in an array must be of the same specified type. 
This is its main difference from a list.

Memory Efficiency: Because the data type is fixed, the array can store elements in a compact block of memory, which saves space.

Performance: The compact storage allows for faster access and manipulation of the elements, making it suitable for large datasets.

Creating an Array
To create an array, you need to import the array module and use the array.array() constructor. This constructor requires two main arguments:

Type Code: A single character that specifies the type of data the array will hold (e.g., 'i' for signed integer, 'f' for float).

Initial Value (Optional): An iterable (like a list) of initial values for the array.

Common Type Codes:
Type Code	 	        Python Type	                  Minimum Size in Bytes
'i'	signed   	             int	                             2
'I'	unsigned 	             int                                 2
'f'	float	                 float	                             4
'd'	double	                 float	                             8


When to Use array vs. list
Use an array when you need to store a large number of items of the same data type and memory efficiency or performance is a concern.
 It is particularly useful for handling numerical data, such as sensor readings or a sequence of pixels in an image.

Use a list when you need to store items of different data types or when the number of items is relatively small and 
the memory usage is not a critical factor. Lists are more flexible and are the default choice for general-purpose collections in Python.

When to Use an Array
Arrays are not always the best choice. They are most useful when:

You're working with a lot of numbers: array is a great choice for large datasets because it uses memory so efficiently.

All your data is the same type: If you have a collection of numbers (like temperatures, exam scores, or sensor data), an array is a perfect fit. 
If you need to mix numbers with text or other data types, a regular list is a better option.

Performance is critical: Because arrays are stored compactly in memory, operations like reading and writing to them can be faster than with lists.


import array

# Create an array of integers from a list
my_array = array.array('i', [10, 20, 30, 40])

# Print the array and its type
print(my_array)
print(type(my_array))
Output:

array('i', [10, 20, 30, 40])
<class 'array.array'>


Common Operations

append(x) → Adds an element at the end
fruits = array.array('u', ['a', 'b'])  
fruits.append('c')  
print(fruits)  # array('u', ['a', 'b', 'c'])

insert(i, x) → Insert at position i
numbers = array.array('i', [10, 20, 30])  
numbers.insert(1, 15)  
print(numbers)  # array('i', [10, 15, 20, 30])

pop([i]) → Removes element at index (last by default)
numbers = array.array('i', [10, 20, 30])  
numbers.pop()     # removes 30  
print(numbers)    # array('i', [10, 20])


remove(x) → Removes first occurrence of element
numbers = array.array('i', [10, 20, 30, 20])  
numbers.remove(20)  
print(numbers)  # array('i', [10, 30, 20])


index(x) → Returns index of element
numbers = array.array('i', [10, 20, 30])  
print(numbers.index(20))  # 1


reverse() → Reverses array
numbers = array.array('i', [10, 20, 30])  
numbers.reverse()  
print(numbers)  # array('i', [30, 20, 10])


count(x) → Counts occurrences
numbers = array.array('i', [10, 20, 20, 30])  
print(numbers.count(20))  # 2

extend(iterable) → Add multiple elements
numbers = array.array('i', [10, 20])  
numbers.extend([30, 40, 50])  
print(numbers)  # array('i', [10, 20, 30, 40, 50])

Looping Through Array
numbers = array.array('i', [5, 10, 15, 20])  

for num in numbers:  
    print(num)  
